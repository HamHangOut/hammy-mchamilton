"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkPlatform = exports.PLATFORM_UNDERSCORE = exports.PLATFORM = exports.EXECUTABLE_NAME = void 0;
var childProcess = __importStar(require("node:child_process"));
var semver = __importStar(require("semver"));
var utils_1 = require("./utils");
var INVALID_PLATFORM_ERROR = "Trunk is only supported on Linux (x64_64, arm64), MacOS (x86_64, arm64), and Windows (x86_64). See https://docs.trunk.io for more info.";
var KERNEL = (function () {
    if (process.platform === "win32") {
        return "mingw";
    }
    if (process.platform === "darwin") {
        return "darwin";
    }
    return "linux";
})();
var MACHINE = (function () {
    if (process.arch === "x64") {
        return "x86_64";
    }
    if (process.arch === "arm") {
        return "arm64";
    }
    return process.arch;
})();
exports.EXECUTABLE_NAME = process.platform === "win32" ? "trunk.exe" : "trunk";
exports.PLATFORM = "".concat(KERNEL, "-").concat(MACHINE);
exports.PLATFORM_UNDERSCORE = "".concat(KERNEL, "_").concat(MACHINE);
var MINIMUM_MACOS_VERSION = new semver.SemVer("10.15.0");
var checkPlatform = function () {
    if (exports.PLATFORM === "linux-x86_64" || exports.PLATFORM === "linux-arm64" || exports.PLATFORM === "mingw-x86_64") {
        return;
    }
    if (exports.PLATFORM === "darwin-x86_64" || exports.PLATFORM === "darwin-arm64") {
        var osxVersion = childProcess.execSync("sw_vers -productVersion").toString().trim();
        var osxSemver = semver.parse(osxVersion);
        if (osxSemver && semver.gte(osxSemver, MINIMUM_MACOS_VERSION)) {
            return;
        }
        (0, utils_1.error)("Trunk requires at least MacOS ".concat(MINIMUM_MACOS_VERSION.raw, " (yours is ").concat(osxVersion, "). See https://docs.trunk.io for more info."));
    }
    (0, utils_1.error)(INVALID_PLATFORM_ERROR);
};
exports.checkPlatform = checkPlatform;
//# sourceMappingURL=platform.js.map