"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadTrunk = exports.getInstallDir = exports.TOOL_TMPDIR = void 0;
var crypto = __importStar(require("node:crypto"));
var fs = __importStar(require("node:fs"));
var os = __importStar(require("node:os"));
var path = __importStar(require("node:path"));
var node_stream_1 = require("node:stream");
var tar = __importStar(require("tar"));
var platform_1 = require("./platform");
var utils_1 = require("./utils");
var DOWNLOAD_FAILURE_ERROR = "Failed to download trunk binary. Please reach out at https://slack.trunk.io for support.";
var DOWNLOAD_CHECKSUM_ERROR = "Downloaded trunk binary does not match expected checksum. Please reach out at https://slack.trunk.io for support.";
var TRUNK_CACHE = (function () {
    if (process.env.TRUNK_CACHE) {
        var trunkCache = process.env.TRUNK_CACHE;
        if (path.isAbsolute(trunkCache)) {
            return trunkCache;
        }
        return path.resolve(process.cwd(), trunkCache);
    }
    if (process.env.XDG_CACHE_HOME) {
        return path.resolve(process.env.XDG_CACHE_HOME, "trunk");
    }
    return path.resolve(os.homedir(), ".cache/trunk");
})();
var CLI_DIR = path.resolve(TRUNK_CACHE, "cli");
fs.mkdirSync(CLI_DIR, { recursive: true });
exports.TOOL_TMPDIR = fs.mkdtempSync(path.resolve(CLI_DIR, "tmp."));
/** Get the directory where the CLI binary should ultimately be installed. */
var getInstallDir = function (version) {
    if (process.platform === "win32") {
        var localApplicationData = path.resolve(process.env.LOCALAPPDATA || "", "trunk", "cli");
        return path.resolve(localApplicationData, "trunk-".concat(version, "-windows"));
    }
    var TOOL_PART = "".concat(version, "-").concat(platform_1.PLATFORM);
    return path.resolve(CLI_DIR, TOOL_PART);
};
exports.getInstallDir = getInstallDir;
/** Get the temporary directory to install to. Caller must create and delete it. */
var getTempInstallDir = function (version) {
    // These temporary install locations match our powershell and bash launchers, respectively.
    if (process.platform === "win32") {
        var localApplicationData = path.resolve(process.env.LOCALAPPDATA || "", "trunk", "cli");
        return path.resolve(localApplicationData, "trunk-".concat(version, "-windows"));
    }
    return path.resolve(exports.TOOL_TMPDIR, "launcher/install");
};
/** Compute the download URL for the CLI binary. */
var getDownloadUrl = function (version) {
    if (process.platform === "win32") {
        // Use the mingw instead of the Windows release so we can use tar to extract
        return "https://trunk.io/releases/".concat(version, "/trunk-").concat(version, ".mingw.tar.gz");
    }
    return "https://trunk.io/releases/".concat(version, "/trunk-").concat(version, "-").concat(platform_1.PLATFORM, ".tar.gz");
};
/** Download a particular version of trunk to the specified directory. Exits if the sha does not match. */
var downloadTrunk = function (version, installDir, expectedSha) { return __awaiter(void 0, void 0, void 0, function () {
    var tempInstallDir, downloadUrl, uniqueId, downloadPath, destinationPath, downloadedCLIBuffer, shaSum, digest;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                tempInstallDir = getTempInstallDir(version);
                return [4 /*yield*/, fs.promises.mkdir(tempInstallDir, { recursive: true })];
            case 1:
                _a.sent();
                return [4 /*yield*/, fs.promises.mkdir(installDir, { recursive: true })];
            case 2:
                _a.sent();
                downloadUrl = getDownloadUrl(version);
                uniqueId = crypto.randomBytes(16).toString("hex");
                downloadPath = "".concat(tempInstallDir, ".").concat(uniqueId, ".tar.gz");
                destinationPath = "".concat(tempInstallDir, ".").concat(uniqueId);
                _a.label = 3;
            case 3:
                _a.trys.push([3, , 11, 15]);
                return [4 /*yield*/, (function () { return __awaiter(void 0, void 0, void 0, function () {
                        var writeStream, writeableStream, response;
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    writeStream = fs.createWriteStream(downloadPath);
                                    writeableStream = node_stream_1.Writable.toWeb(writeStream);
                                    return [4 /*yield*/, global.fetch(downloadUrl)];
                                case 1:
                                    response = _b.sent();
                                    if (!(!response.ok || !response.body)) return [3 /*break*/, 3];
                                    return [4 /*yield*/, fs.promises.unlink(downloadPath).catch(function () { })];
                                case 2:
                                    _b.sent();
                                    (0, utils_1.error)(DOWNLOAD_FAILURE_ERROR);
                                    _b.label = 3;
                                case 3: return [4 /*yield*/, ((_a = response.body) === null || _a === void 0 ? void 0 : _a.pipeTo(writeableStream))];
                                case 4:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); })()];
            case 4:
                _a.sent();
                if (!expectedSha) return [3 /*break*/, 6];
                return [4 /*yield*/, fs.promises.readFile(downloadPath)];
            case 5:
                downloadedCLIBuffer = _a.sent();
                shaSum = crypto.createHash("sha256");
                shaSum.update(downloadedCLIBuffer);
                digest = shaSum.digest("hex");
                if (expectedSha !== digest) {
                    (0, utils_1.error)(DOWNLOAD_CHECKSUM_ERROR);
                }
                _a.label = 6;
            case 6: return [4 /*yield*/, fs.promises.mkdir(destinationPath)];
            case 7:
                _a.sent();
                return [4 /*yield*/, tar.x({ file: downloadPath, cwd: destinationPath, strip: 1 })];
            case 8:
                _a.sent();
                return [4 /*yield*/, fs.promises.rm(tempInstallDir, { recursive: true, force: true }).catch(function () { })];
            case 9:
                _a.sent();
                return [4 /*yield*/, fs.promises.rename(destinationPath, installDir)];
            case 10:
                _a.sent();
                return [3 /*break*/, 15];
            case 11: 
            // Cleanup.
            return [4 /*yield*/, fs.promises.unlink(downloadPath).catch(function () { })];
            case 12:
                // Cleanup.
                _a.sent();
                return [4 /*yield*/, fs.promises.rm(destinationPath, { recursive: true, force: true }).catch(function () { })];
            case 13:
                _a.sent();
                return [4 /*yield*/, fs.promises.rm(exports.TOOL_TMPDIR, { recursive: true, force: true }).catch(function () { })];
            case 14:
                _a.sent();
                return [7 /*endfinally*/];
            case 15: return [2 /*return*/];
        }
    });
}); };
exports.downloadTrunk = downloadTrunk;
//# sourceMappingURL=download.js.map