"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTrunkVersion = void 0;
var fs = __importStar(require("node:fs"));
var path = __importStar(require("node:path"));
var yaml = __importStar(require("yaml"));
var platform_1 = require("./platform");
var utils_1 = require("./utils");
var INVALID_CLI_VERSION_ERROR = "Invalid .trunk/trunk.yaml, no cli version found. See https://docs.trunk.io for more info.";
var QUERY_LATEST_ERROR = "Failed to detect latest trunk version. See https://docs.trunk.io for more info.";
var LATEST_URL = "https://trunk.io/releases/latest";
/** Try to get the version from trunk.yaml. */
var tryGetTrunkVersion = function () { return __awaiter(void 0, void 0, void 0, function () {
    var currentDir, trunkYamlPath, trunkConfig, _a, _b, version, sha, _e_1, _err_1;
    var _c, _d, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                if (process.env.TRUNK_CLI_VERSION) {
                    return [2 /*return*/, { version: process.env.TRUNK_CLI_VERSION, sha: undefined }];
                }
                currentDir = process.cwd();
                _g.label = 1;
            case 1:
                if (!(currentDir !== "/" && !currentDir.endsWith(":\\"))) return [3 /*break*/, 11];
                trunkYamlPath = path.resolve(currentDir, ".trunk/trunk.yaml");
                _g.label = 2;
            case 2:
                _g.trys.push([2, 9, , 10]);
                // trunk-ignore-begin(eslint/no-await-in-loop): Desired behavior to search for trunk.yaml
                return [4 /*yield*/, fs.promises.access(trunkYamlPath, fs.constants.F_OK)];
            case 3:
                // trunk-ignore-begin(eslint/no-await-in-loop): Desired behavior to search for trunk.yaml
                _g.sent();
                _g.label = 4;
            case 4:
                _g.trys.push([4, 7, , 8]);
                _b = (_a = yaml).parse;
                return [4 /*yield*/, fs.promises.readFile(trunkYamlPath, "utf8")];
            case 5: return [4 /*yield*/, _b.apply(_a, [(_g.sent()).toString(),
                    {
                        // Allow for non-unique keys, since this is something we allow in the binary. Usually we "accept last".
                        uniqueKeys: false,
                    }])];
            case 6:
                trunkConfig = (_g.sent());
                version = (_c = trunkConfig === null || trunkConfig === void 0 ? void 0 : trunkConfig.cli) === null || _c === void 0 ? void 0 : _c.version;
                sha = (_f = (_d = trunkConfig === null || trunkConfig === void 0 ? void 0 : trunkConfig.cli) === null || _d === void 0 ? void 0 : _d.sha256) === null || _f === void 0 ? void 0 : _f[platform_1.PLATFORM_UNDERSCORE];
                if (version) {
                    return [2 /*return*/, { version: version, sha: sha }];
                }
                return [3 /*break*/, 8];
            case 7:
                _e_1 = _g.sent();
                return [3 /*break*/, 8];
            case 8:
                (0, utils_1.error)(INVALID_CLI_VERSION_ERROR);
                return [3 /*break*/, 10];
            case 9:
                _err_1 = _g.sent();
                currentDir = path.dirname(currentDir);
                return [3 /*break*/, 1];
            case 10: return [3 /*break*/, 1];
            case 11: return [2 /*return*/, {}];
        }
    });
}); };
/** Get the latest available version of trunk. */
var getLatestTrunkVersion = function () { return __awaiter(void 0, void 0, void 0, function () {
    var response, responseBody, releaseInfo, version, sha;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, fetch(LATEST_URL)];
            case 1:
                response = _b.sent();
                if (!response.ok) {
                    (0, utils_1.error)("Failed to query latest trunk version. Got ".concat(response.status, ". Please reach out at https://slack.trunk.io for support."));
                }
                return [4 /*yield*/, response.text()];
            case 2:
                responseBody = _b.sent();
                try {
                    releaseInfo = yaml.parse(responseBody);
                    version = releaseInfo === null || releaseInfo === void 0 ? void 0 : releaseInfo.version;
                    sha = (_a = releaseInfo === null || releaseInfo === void 0 ? void 0 : releaseInfo.sha256) === null || _a === void 0 ? void 0 : _a[platform_1.PLATFORM_UNDERSCORE];
                    if (version && sha) {
                        return [2 /*return*/, { version: version, sha: sha }];
                    }
                }
                catch (_e) {
                    // noop
                }
                return [2 /*return*/, (0, utils_1.error)(QUERY_LATEST_ERROR)];
        }
    });
}); };
/** Get the intended version to run. */
var getTrunkVersion = function () { return __awaiter(void 0, void 0, void 0, function () {
    var parsedVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, tryGetTrunkVersion()];
            case 1:
                parsedVersion = _a.sent();
                if (parsedVersion.version) {
                    return [2 /*return*/, parsedVersion];
                }
                return [4 /*yield*/, getLatestTrunkVersion()];
            case 2: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getTrunkVersion = getTrunkVersion;
//# sourceMappingURL=version.js.map